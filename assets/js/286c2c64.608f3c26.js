"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6296],{5374:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>r});var i=s(5893),t=s(1151);const o={sidebar_position:1},a="Simple Animations",d={id:"dynamic/simple",title:"Simple Animations",description:"Touying provides two markers for simple animation effects: #pause and #meanwhile.",source:"@site/versioned_docs/version-0.3.x/dynamic/simple.md",sourceDirName:"dynamic",slug:"/dynamic/simple",permalink:"/touying/docs/0.3.x/dynamic/simple",draft:!1,unlisted:!1,editUrl:"https://github.com/touying-typ/touying/tree/main/docs/versioned_docs/version-0.3.x/dynamic/simple.md",tags:[],version:"0.3.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Dynamic Slides",permalink:"/touying/docs/0.3.x/category/dynamic-slides"},next:{title:"Complex Animations",permalink:"/touying/docs/0.3.x/dynamic/complex"}},c={},r=[{value:"pause",id:"pause",level:2},{value:"meanwhile",id:"meanwhile",level:2},{value:"Handling set-show rules",id:"handling-set-show-rules",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"simple-animations",children:"Simple Animations"}),"\n",(0,i.jsxs)(n.p,{children:["Touying provides two markers for simple animation effects: ",(0,i.jsx)(n.code,{children:"#pause"})," and ",(0,i.jsx)(n.code,{children:"#meanwhile"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"pause",children:"pause"}),"\n",(0,i.jsxs)(n.p,{children:["The purpose of ",(0,i.jsx)(n.code,{children:"#pause"})," is straightforward \u2013 it separates the subsequent content into the next subslide. You can use multiple ",(0,i.jsx)(n.code,{children:"#pause"})," to create multiple subslides. Here's a simple example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typst",children:"#slide[\n  First #pause Second\n\n  #pause\n\n  Third\n]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/touying-typ/touying/assets/34951714/a3bed1d3-e660-456d-8a54-a914436f43bf",alt:"image"})}),"\n",(0,i.jsx)(n.p,{children:"This example will create three subslides, gradually revealing the content."}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, ",(0,i.jsx)(n.code,{children:"#pause"})," can be used inline or on a separate line."]}),"\n",(0,i.jsx)(n.h2,{id:"meanwhile",children:"meanwhile"}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, you may need to display additional content simultaneously with ",(0,i.jsx)(n.code,{children:"#pause"}),". In such cases, you can use ",(0,i.jsx)(n.code,{children:"#meanwhile"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typst",children:"#slide[\n  First\n  \n  #pause\n  \n  Second\n\n  #meanwhile\n\n  Third\n\n  #pause\n\n  Fourth\n]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/touying-typ/touying/assets/34951714/24ca19a3-b27c-4d31-ab75-09c37911e6ac",alt:"image"})}),"\n",(0,i.jsx)(n.p,{children:'This example will create only two subslides, with "First" and "Third" displayed simultaneously, and "Second" and "Fourth" displayed simultaneously.'}),"\n",(0,i.jsx)(n.h2,{id:"handling-set-show-rules",children:"Handling set-show rules"}),"\n",(0,i.jsxs)(n.p,{children:["If you use set-show rules inside ",(0,i.jsx)(n.code,{children:"slide[..]"}),", you might be surprised to find that subsequent ",(0,i.jsx)(n.code,{children:"#pause"})," and ",(0,i.jsx)(n.code,{children:"#meanwhile"})," do not work. This is because Touying cannot detect the content inside ",(0,i.jsx)(n.code,{children:"styled(..)"})," (content after set-show rules is encompassed by ",(0,i.jsx)(n.code,{children:"styled"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["To address this issue, Touying provides a ",(0,i.jsx)(n.code,{children:"setting"})," parameter for the ",(0,i.jsx)(n.code,{children:"#slide()"})," function. You can place your set-show rules in the ",(0,i.jsx)(n.code,{children:"setting"})," parameter. For example, changing the font color:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typst",children:"#slide(setting: body => {\n  set text(fill: blue)\n  body\n})[\n  First\n  \n  #pause\n  \n  Second\n]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/touying-typ/touying/assets/34951714/8e31fc8a-5ab1-4181-a46a-fa96cf790dff",alt:"image"})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, Touying currently does not support ",(0,i.jsx)(n.code,{children:"#pause"})," and ",(0,i.jsx)(n.code,{children:"#meanwhile"})," inside layout functions like ",(0,i.jsx)(n.code,{children:"grid"}),". This is due to the same limitation, but you can use the ",(0,i.jsx)(n.code,{children:"composer"})," parameter of ",(0,i.jsx)(n.code,{children:"#slide()"})," to meet most requirements."]}),"\n",(0,i.jsx)(n.admonition,{title:"Internals",type:"tip",children:(0,i.jsxs)(n.p,{children:["Touying doesn't rely on ",(0,i.jsx)(n.code,{children:"counter"})," and ",(0,i.jsx)(n.code,{children:"locate"})," to implement ",(0,i.jsx)(n.code,{children:"#pause"}),". Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need."]})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>a});var i=s(7294);const t={},o=i.createContext(t);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);